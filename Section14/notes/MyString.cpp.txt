#include <iostream>
#include <cstring>
#include "MyString.h"

MyString::MyString() : str{nullptr} {
    str = new char[1];
    *str = '\0';
}

MyString::MyString(const char *s) : str {nullptr} {
    if(s==nullptr) {
        str = new char[1];
        *str = '\0';
    } else{
        str = new char[std::strlen(s) + 1];
        std::strcpy(str,s);
    }
}

MyString::MyString(const MyString &source) : str {nullptr} {
    str = new char[std::strlen(source.str) + 1];
    std::strcpy(str,source.str);
}

MyString::~MyString() {
    std::cout << "Destructor called for string: " << str << std::endl;
    delete [] str;
}

void MyString::display() const {
    std::cout << str << ":" << get_length() << std::endl;
}

int MyString::get_length() const {
     return std::strlen(str);
}

const char* MyString::get_str() const {
    return str;
}

// Copy Assignment
MyString& MyString::operator=(const MyString &rhs) {
    std::cout << "Copy Assignment" << std::endl;
    if (this == &rhs) {
        return *this;
    } 
    delete[] this->str;

    str = new char[std::strlen(rhs.str) + 1];
    std::strcpy(str, rhs.str);
    return *this;
}

// Concatenation
MyString &MyString::operator+=(const MyString &rhs) {
    std::cout << "Concatenation" << std::endl;
    char *buff = new char[std::strlen(this->str) + std::strlen(rhs.str) +1];
    std::strcpy(buff, this->str);
    std::strcat(buff, rhs.str);
    delete[] this->str;
    str = buff;
    return *this;
}

// Move Assignment
// MyString &MyString::operator=(MyString &&rhs) {
//     std::cout << "Using move assignment " << std::endl;

//     if(this == &rhs) {
//         return *this;
//     }
//     delete [] str;
//     str = rhs.str;
//     rhs.str = nullptr;
//     return *this;
// }

// Equality 
// bool MyString::operator==(const MyString &rhs) {
//     return (std::strcmp(str, rhs.str) == 0);
// }

// Make Lowercase 
// MyString MyString::operator-() const {
//     char *buff = new char[std::strlen(str) + 1];
//     std::strcpy(buff, str);
//     for(size_t i{0}; i<std::strlen(str) +1 ; i++){
//         buff[i] = std::tolower(buff[i]);
//     }
//     MyString temp {buff};
//     delete [] buff;
//     return temp;
// }

// Friend Equality 
bool operator==(const MyString &lhs, const MyString &rhs) {
    return (std::strcmp(lhs.str, rhs.str) == 0);
}

// Friend Make Lowercase
MyString operator-(const MyString &obj) {
    char *buff = new char[std::strlen(obj.str) + 1];
    std::strcpy(buff, obj.str);
    for(size_t i{0}; i<std::strlen(obj.str) +1 ; i++){
        buff[i] = std::tolower(buff[i]);
    }
    MyString temp {buff};
    delete [] buff;
    return temp;
}

// Friend Concatenation
MyString operator+(const MyString &lhs, const MyString &rhs) {
    char *buff = new char[std::strlen(lhs.str) + std::strlen(rhs.str) + 1];
    std::strcpy(buff, lhs.str);
    std::strcat(buff, rhs.str);

    MyString temp {buff};
    delete [] buff;
    return temp; 
}
 
// Friend Overloaded Insertion Operator
std::ostream &operator<<(std::ostream &os, const MyString &rhs) {
    os << rhs.str;
    return os;
}

std::istream &operator>>(std::istream &in, MyString &rhs) {
    char *buff = new char[1000];
    in >> buff;
    rhs = MyString {buff};
    delete [] buff;
    return in;
}